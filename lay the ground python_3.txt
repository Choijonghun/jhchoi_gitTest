제 3장 제어문!
: 집을 지을 때 나무, 돌, 시멘트 등(자료형)은 재료가 되고, 집의 뼈대를 이루는 철근은 제어문 이다.
이번 장에서는 자료형을 바탕으로 제어문을 이용하여 프로그램의 구조를 만들어 보자.


If문
python은 if문에 속하는 모든 문장에 들여쓰기를 이용하여 표현함

예제)

if <조건문>이 참이면:
	수행할 문장1
	수행할 문장2
elif <조건문>이 참이면  #이전 조건문이 거짓이면 elif의 <조건문> 실행
	수행할 문장3
	수행할 문장4

elif ...	# elif 개수 제한 없이 사용 가능

else <조건문>이 모두 거짓이면:
	수행할 문장5
	수행할 문장6

조건문이란?
: 참과 거짓을 판단하는 문장
<, >, ==, !=, >=, <=  : 부등호 작다,크다,같다,같지않다,크거나같다, 작거나같다

x or y  : x와 y 둘중에 하나만 참이여도 참이다 ( +, | )
x and y : x와 y 모두 참이여야 참이다 ( *, & )
not x : x가 거짓이면 참이다.

x in s : s라는 리스트(or튜플or문자열) 안에 x가 들어있어면 참
x not in s : s라는 리스트(or튜플or문자열) 안에 x가 들어있어면 거짓

# 가끔 조건먼의 참, 거짓에 따라 행동을 정의할때 아무것도 하지 않도록 설정하고 싶으면 pass를 적용


조건부 표현식

if score >= 60:
    message = "success"
else:
    message = "failure"

간략화

messag = "success" if score >= 60 else "failure"  #중요! 하이라이트! 조건부 표현식은 가독성에 유리하고 활용성이 좋음




While문 #반복문
예제로 내용 대체

coffee = 10
while True:
    money = int(input("돈을 넣어 주세요: "))
    if money == 300:
        print("커피를 줍니다.")
        coffee = coffee -1
    elif money > 300:
        print("거스름돈 %d를 주고 커피를 줍니다." % (money -300))
        coffee = coffee -1
    else:
        print("돈을 다시 돌려주고 커피를 주지 않습니다.")
        print("남은 커피의 양은 %d개 입니다." % coffee)
    if coffee == 0:
        print("커피가 다 떨어졌습니다. 판매를 중지 합니다.")
        break  #while문 중지


while문의 맨처음으로 돌아가기
continue문을 이용 (예제로 내용 대체)

a = 0
while a < 10:
   a = a + 1
   if a % 2 == 0: continue  #continue문은 while문의 맨 처음으로 돌아가게 하는 명령어이다.
   print(a)

무한루프
>>> while True:
...     print("Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.")
...
Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.
Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.
...
...


for문

for문의 기본 구조

test_list = ['one', 'two', 'three']
for i in test_list:
   print(i)

>>> one
>>> two
>>> three

for문 예제
#marks1.py
marks = [90, 25, 67, 45, 80]

number = 0 
for mark in marks:   # 점수 리스트 marks에서 차례로 점수를 꺼내어 mark라는 변수에 대입하고 for문 안의 문장들을 수행
    number = number +1 
    if mark >= 60: 
        print(f"{number}번 학생은 합격입니다.")
    else: 
        print(f"{number}번 학생은 합격입니다.")

실행해 보자.
C:\doit>python marks1.py
1번 학생은 합격입니다.
2번 학생은 불합격입니다.
3번 학생은 합격입니다.
4번 학생은 불합격입니다.
5번 학생은 합격입니다.


# for문에서도 continue문 사용 가능하다.

for문과 함께 자주 사용하는 range함수

a = range(1,11)  #1부터 11미만의 숫자를 포함하는 range객체를 만들어 줌

예제
#marks3.py
marks = [90, 25, 67, 45, 80]
for number in range(len(marks)):  #len 함수는 리스트 안의 요소 개수를 반환함 즉, len(marks) 는 5가 됨
    if marks[number] < 60: 
        continue		      #continue문 수행
    print("%d번 학생 축하합니다. 합격입니다." % (number+1))

실행해 보자.
C:\doit>python marks3.py
1번 학생 축하합니다. 합격입니다.
3번 학생 축하합니다. 합격입니다.
5번 학생 축하합니다. 합격입니다.


리스트 내포 사용하기
: 리스트 안에 for문을 포함하는 리스트 내포(List comprehension)를 사용하면 좀 더 편리하고 직관적인 프로그램밍 가능

a = [1, 2, 3, 4]
result = []
for num in a:
   result.append(num*3)
print(result)
>>> [3, 6 ,9 ,12]

 리스트 내포...

a = [1, 2, 3, 4]
result = [num *3 for num in a]
print(result)
>>> [3, 6, 9, 12]


리스트 내포를 이용한 구구단 만들기
result = [ x*y for x in range(2,10)
	     for y in range(1,10)]
print(result)
>>>
[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16,
20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42
, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72,
9, 18, 27, 36, 45, 54, 63, 72, 81]



리스트내포 + 조건문
a = [1,2,3,4]
result = [num * 3 for num in a if num % 2 == 0]  #num을 2로나누어서 0이면 a[num]*3하여 result에 반환
print(result)
>>> [6, 12]
