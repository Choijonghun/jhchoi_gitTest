'''
#lay the goround python
숫자형
integer : 정수를 뜻하는 자료형
a = 10


#float : 실수형의 소수점 표현 방식
a = 3.14e2 #컴퓨터식 지수 표현 방식 

#8진수(Octal) 0o 또는 0O(숫자 0 + 알파벳 소문자 o 또는 대문자 O)로 시작

a = 0o177

#6진수(Hexdecimal) 0x로 시작
a = 0x8ff

숫자 연산자
사칙연산 : + - * /
x의y 제곱 : x ** y
나눗셈 후 나머지를 반환 : %
나숫셈 후 몫을 반환 : //


###########
문자열 자료형
string : 문자열
print('"문자열 안에 "큰따옴표" 가 포함 됨')
print("문자열 안에 따옴표's가 포함 됨")
#
이스케이프 코드{
  \n	문자열 안에서 줄을 바꿀 때 사용
  \t	문자열 사이에 탭 간격을 줄 때 사용
  \\	문자 \를 그대로 표현할 때 사용
  \'	작은따옴표(')를 그대로 표현할 때 사용
  \"	큰따옴표(")를 그대로 표현할 때 사용
  \r	캐리지 리턴(줄 바꿈 문자, 현재 커서를 가장 앞으로 이동)
  \f	폼 피드(줄 바꿈 문자, 현재 커서를 다음 줄로 이동)
  \a	벨 소리(출력할 때 PC 스피커에서 '삑' 소리가 난다)
  \b	백 스페이스
  \000	널 문자
}
#
print("="*50,"\nHello python\n","="*50)#문자열 곱하기 및 이스케이프코드 응용
#
a = "len : 문자열 길이를 구하는 함수, 콘솔창에 len(a) 입력해보기"
#
문자열 인덱싱
a = "Life is too short, You need Python"
>>> a[3] == e
>>> a[-3] == h
#
문자열 슬라이싱
a = "python is very good!"
>>> a[0:5]  == 'python'
>>> a[9:-5] == 'very'

문자열 슬라이싱 활용
b = "Pithon"
>>> a[:1] == 'P'
>>> a[2:] =='thon'
>>> a[:1] + 'y' + a[2:] == 'Python'

문자열 포매팅
숫자
>>> "I eat %d apples." % 3 == 'I eat 3 apples.'
문자열
>>> "I eat %s apples." % "five" == 'I eat five apples.'
format을 이용한 포매팅
>>> number = 10
>>> day = "three"
>>> "I ate {0} apples. so I was sick for {1} days.".format(number, day) == 'I ate 10 apples. so I was sick for three days.'
>>>f"I ate {number} apples. so I was sick for {day} days."

문자열 관련 함수
a = 'Python is the best choice'
>>> a.count('i') == 2 #문자 개수 세기
>>> a.find('h') == 3 #문자 위치 알려주기, 문자열 미존재 시 -1 반환
>>> a.index(h') == 3 #문자 위치 알려주기, 문자열 미존재 시 오류를 발생
>>> ",".join('abcd') == 'a,b,c,d' #문자열 삽입
>>> a.upper() == 'PYTHON IS THE BEST CHOICE' #소문자를 대문자로
>>> a.lower() == 'python is the best choice' #대문자를 소문자로
>>> rstrip, lstrip, strip #오른쪽 공백, 왼쪽 공백, 양쪽 공백
>>> a.replace('Python','Programing') == 'Programing is the best choice' #문자열 바꾸기
>>> a.split() == ['Python', 'is', 'the', 'best', 'choice']



리스트
>>> a = list() == a = [] #비어있는 리스트 생성
>>> e = [1, 'word', ['list', 'in']] #숫자, 문자열, 리스트를 요소로 갖을 수 있음

리스트 인덱싱
a = [1, 2, ['a', 'b', ['Life', 'is']]] #삼중 리스트
>>> a[2][2][0] == 'Life'

리스트 슬라이싱
a = [1, 2, 3, ['a', 'b', 'c'], 4, 5] #중첩 리스트 슬라이싱 예제
>>> a[2:5] == [3, ['a', 'b', 'c'], 4]
>>> a[3][:2] == ['a', 'b']

리스트 연산
a = [1, 2, 3], b = [4, 5, 6]
>>> a + b == [1, 2, 3, 4, 5, 6]  # + 는 리스트를 합침
>>> a * 3 == [1, 2, 3, 1, 2, 3, 1, 2, 3] # * 는 리스트 반복

리스트 길이
a = [1, 2, 3, 4, 5, 6, 7]
>>> len(a) == 7 # len함수 기억하자

리스트 수정과 삭제
a = [1, 2, 3, 4, 5, 6, 7]
>>> a[3] = 6, a == [1, 2, 3, 6, 5, 6, 7] # 리스트 수정
>>> del a[3], a == [1, 2, 3, 5, 6, 7] # 리스트 삭제, 슬라이싱 기법 사용하여 여러 개를 한번에 삭제 가능

리스트 관련 함수
a = [1, 3, 2, 4]
>>> a.apend(5) == [1, 3, 2, 4, 5] #리스트에 요소 추가, append 기억하자
>>> a.sort() == [1, 2, 3, 4] #리스트 정렬
>>> a.reverse() == [4, 2, 3, 1] #리스트 뒤집기
>>> a.index(3) == 2 #위치 반환, 리스트에 x 값이 있으면 x의 위차 값을 돌려 준다, 미존재 시 오류를 발생
>>> a.insert(0, 5) == [5, 1, 3, 2, 4] #a번째에 위치에 b를 삽입
>>> a.remove(3) == [1, 2, 4] #첫번쨰로 나오는 x를 삭제
>>> a.pop() == 4, a == [1, 3, 2] #pop()은 리스트의 맨 마지막 요소를 추출하고 삭제
>>> a.pop(1) == 3, a == [1, 2, 4] #x위치의 요소를 추출하고 삭제
>>> a.count(1) == 1 #리스트 안에 x가 몇 개 있는지 찾아 반환해 줌
>>> a.extend([5, 6]) == [1, 3, 2, 4, 5, 6] #리스트 + 연산과 비슷
b = [5, 6]
>>> a.extend(b) == [1, 3, 2, 4, 5, 6] #리스트 + 연산과 비슷

튜플
 : 튜플(tuple)은 몇 가지 점을 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점은 다음과 같다.
	-리스트는 [ ]으로 둘러싸지만 튜플은 ( )으로 둘러싼다.
	-리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.
	-즉, 튜플의 항목 값은 변화가 불가능함


딕셔너리 
: 대응 관계를 나타내는 자료형, 연관 배열(Associative array) 또는 해시(Hash)라고 한다.
	-Key 값과 value 값 한쌍을 설정하여 Key를 통해 Value를 얻는다.
	-Key 값에는 리스트 불가
	-Key가 중복되었을 때 1개를 제외한 나머지 Key:Value 값이 모두 무시 됨 

dic = {'name':'jh', 'phone':'01022307227', 'birth': [0, 9, 1, 6]}

a = {1: 'a'}
>>> a[2] = 'b' == {1: 'a', 2: 'b'} #딕셔너리 쌍 추가
>>> a['name'] = 'jh' == {1: 'a', 2: 'b', 'name': 'jh'}
>>> a[3] = [1, 2, 3] == {1: 'a', 2: 'b', 'name': 'jh', 3: [1, 2, 3]}  #value에 리스트 추가 가능
>>> del a['name] == {1: 'a', 2: 'b', 3: [1, 2, 3]}  #딕셔너리 요소 삭제 key값에 해당하는 쌍이 삭제 됨

딕셔너리 관련 함수들
a = {'name':'jh', 'phone':'01022307227', 'birth': [0, 9, 1, 6]}
>>> a.keys() == dict_keys(['name', 'phone', 'birth'])  #딕셔너리 a의 Key만 모아서 dict_keys 객체를 반환
>>> list(a.keys()) == ['name', 'phone', 'birth'] #Key리스트 만들기, 딕셔너리 a의 key만 모아서 리스트로 만듦
>>> a.value() == dict_values(['jh', '01022307227', [0, 9, 1, 6]]) #딕셔너리 a의 value만 모아서 dict_values 객체를 반환
>>> a.items() == dict_items([('name':'jh'), ('phone':'01022307227'), ('birth': [0, 9, 1, 6])]) #Key와 Value의 쌍을 튜플로 묶은 값을 dict_item 객체로 반환
>>> a.clear() == {}  #딕셔너리 안의 모든 요소를 삭제
>>> a.get('name') == 'jh'  #key로 value얻기(get), a['name']와 같음
>>>> get은 요소 값이 미존재 시 None을 반환, a['unknown']은 오류를 출력
>>> a.get('nonono', 'fail') == fail  #딕셔너리 안에 찾으려는 Key 값이 없을 경우 미리 정해 둔 디폴트 값(fail)을 대신 가져오게 함

집합
: 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
	- 중복을 허용하지 않는다.
	- 순서가 없다.

s1 = set([1, 2, 3, 4, 5 ,6])
s2 = set(4, 5, 6, 7, 8, 9])

>>> s1 & s2 == [4, 5, 6]  # & 교집합
>>>> s1.intersection(s2) # intersection을 이용한 교집합

>>> s1 | s2 == [1, 2, 3, 4, 5, 6, 7, 8, 9] # | 합집합
>>>> s1.union(s2)  # union을 이용한 합집합

>>> s1 -s2 == [1, 2, 3]  #차집합
>>>> s1.difference(s2)  # difference를 이용한 차집합

집합 자료형 관련 함수들
s1 = set([1, 2, 3])

s1.add(4) == [1, 2, 3, 4]  # 값 1개 추가
s1.update([4, 5, 6]) == [1, 2, 3, 4, 5, 6]  # 값 여러개 추가
s1.remove(2) == [1, 3]  # 특정 값 제거

불 자료형
: 참과 거짓을 나타내는 자료형
	- True or False 만 가질 수 있음

a = True
>>> type(a) == <class 'bool'>  

기타 함수

a = [1, 2, 3]
b = a

is
>>> a is b == True  # a와 b가 가르키는 객체는 동일 한가?

리스트 복사
b = a 
>>> a[1] = 4
>>> a == [1, 4, 3], b == [1, 4, 3]  #a와 b는 동일한 리스트를 가리키고 있기 때문에 같은 값이 출력됨

b = a[;]
>>> a[1] = 4
>>> a== [1, 4, 3], [b == [1, 2, 3]  #a 변수의 값을 가져오면서 a와는 다른 주소를 가리키도록 [;] 이용해 복사

from copy import copy
b = copy(a)
>>> a[1] = 4
>>> a is b == False  # copy 모듈을 이용 동작은 b = a[;]와 동일 하다.

변수를 만드는 여러가지 방법
a, b = ('python', 'life') ||  (a, b) = 'python', 'life'  #튜플
>>> a == ('python', 'life'), b == ('python', 'life')  # a, b에 같은 값을 대입할 수 있음

리스트도 가능
[a, b] = ['python', 'life']

여러개의 변수에 같은 값
a = b = 'python'

두 변수의 값을 교환 하기
a = 5
b = 3
>>> a, b = b, a
>>> a == 5, b== 3  #a, b = b, a 문장을 수행한 후에는 그 값이 서로 바뀜











